# Service for the default-http-backend used in the Ingress Controller
apiVersion: v1
kind: Service
metadata:
  name: default-http-backend
spec:
  type: ClusterIP
  selector:
    app: default-http-backend
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080

---

# Replication Controller for the default-http-backend used in the Ingress
# Controller
apiVersion: v1
kind: ReplicationController
metadata:
  name: default-http-backend
  labels:
    app: default-http-backend
spec:
  replicas: 1
  selector:
    app: default-http-backend
  template:
    metadata:
      labels:
        app: default-http-backend
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: default-http-backend
        # Any image is permissable as long as:
        # 1. It serves a 404 page at /
        # 2. It serves 200 on a /healthz endpoint
        image: gcr.io/google_containers/defaultbackend:1.4
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 10m
            memory: 20Mi
          requests:
            cpu: 10m
            memory: 20Mi

---

# Service for the nginx-ing-cntlr
apiVersion: v1
kind: Service
metadata:
  name: nginx-ing-cntlr
  labels:
    app: nginx-ing-cntlr
spec:
  type: NodePort
  selector:
    app: nginx-ing-cntlr
  ports:
    - name: http
      port: 80
      nodePort: 30100

---

# Deployment for the nginx-ing-cntlr
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx-ing-cntlr
  labels:
    app: nginx-ing-cntlr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-ing-cntlr
  template:
    metadata:
      labels:
        app: nginx-ing-cntlr
      annotations:
        prometheus.io/port: '10254'
        prometheus.io/scrape: 'true'
    spec:
      # hostNetwork makes it possible to use ipv6 and to preserve the source IP correctly regardless of docker configuration
      # however, it is not a hard dependency of the nginx-ing-cntlr itself and it may cause issues if port 10254 already is taken on the host
      # that said, since hostPort is broken on CNI (https://github.com/kubernetes/kubernetes/issues/31307) we have to use hostNetwork where CNI is used
      # like with kubeadm
      # hostNetwork: true
      terminationGracePeriodSeconds: 60
      containers:
        - name: nginx-ing-cntlr
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.22.0
          imagePullPolicy: Always
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 1
          args:
            - /nginx-ingress-controller
            - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
            - --ingress-class=my-nginx
            #- --configmap=$(POD_NAMESPACE)/custom-configmap
            #- --watch-namespace=$(POD_NAMESPACE)
            #- --default-ssl-certificate=$(POD_NAMESPACE)/ingress-tls-secret
          # Use downward API
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - containerPort: 80
          # volumeMounts:
          #   - name: tls-dhparam-vol
          #     mountPath: /etc/nginx-ssl/dhparam
          #   - name: nginx-template-volume
          #     mountPath: /etc/nginx/template
          #     readOnly: true
      # volumes:
      #   - name: tls-dhparam-vol
      #     secret:
      #       secretName: tls-dhparam
      #   - name: nginx-template-volume
      #     configMap:
      #       name: nginx-template
      #       items:
      #       - key: nginx.tmpl
      #         path: nginx.tmpl
